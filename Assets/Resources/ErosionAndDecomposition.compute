#pragma kernel CSMain
#include <helpers.cginc>

RWTexture2D<float> height;
RWTexture2D<float2> vel;
RWTexture2D<float> water;
RWTexture2D<float> sed;
RWTexture2D<float> newSed;

uint resolution;
float dTime;

float Kc;
float Ks;
float Kd;
float minAngle;

float computeCapacity(uint3 id);
float sinAlpha(uint3 id);
float3 computeNormal(uint3 id);

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float C = computeCapacity(id);
    
    if (C > sed[id.xy])
    {
    float disolvedSed = max(0.0, Ks * (C - sed[id.xy]));
        height[id.xy] = height[id.xy] - disolvedSed;
		newSed[id.xy] = sed[id.xy] + disolvedSed;
	}
    else
    {
		float depositedSed = Kd * (sed[id.xy] - C);
		height[id.xy] = height[id.xy] + depositedSed;
		newSed[id.xy] = sed[id.xy] - depositedSed;
	}
}

float computeCapacity(uint3 id) {
    return Kc * sinAlpha(id) * length(vel[id.xy]) * min(0.001, water[id.xy]);
}

float sinAlpha(uint3 id) {
	float3 normal = computeNormal(id);
    return max(minAngle, sqrt(1 - normal.z * normal.z));
}

float3 computeNormal(uint3 id) {
    float x = (height[getR(id, resolution)] - height[getL(id, resolution)]);
    float y = (height[getT(id, resolution)] - height[getB(id, resolution)]);
    float z = 2.0;
    return normalize(float3(x, y, z));
}
