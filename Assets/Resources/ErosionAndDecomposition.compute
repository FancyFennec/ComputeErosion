#pragma kernel CSMain

RWTexture2D<float> height;
RWTexture2D<float2> vel;
RWTexture2D<float2> water;
RWTexture2D<float2> sed;

int resolution;
float dTime;

float Ks;
float Kd;
float Kc;
float minAngle;

float computeCapacity(uint3 id);
float sinAlpha(uint3 id);
float3 computeNormal(uint3 id);

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float C = computeCapacity(id);

	if (C > sed[id.xy].x) {
		float disolvedSed = Ks * (C - sed[id.xy].x);

		disolvedSed = min(disolvedSed, height[id.xy]); //Shader graph doesn't like negative floats

		height[id.xy] = height[id.xy] - disolvedSed;
		water[id.xy] = float2(water[id.xy].x, water[id.xy].y + disolvedSed);
		sed[id.xy] = float2(sed[id.xy].x, sed[id.xy].x + disolvedSed);
	}
	else {
		float depositedSed = Kd * (sed[id.xy].x - C);
		depositedSed = min(depositedSed, water[id.xy].y); //Shader graph doesn't like negative floats
		depositedSed = min(depositedSed, sed[id.xy].x);

		height[id.xy] = height[id.xy] + depositedSed;
		water[id.xy] = float2(water[id.xy].x, water[id.xy].y - depositedSed);
		sed[id.xy] = float2(sed[id.xy].x, sed[id.xy].x - depositedSed);
	}
}

float computeCapacity(uint3 id) {
	return Kc * sinAlpha(id) * length(vel[id.xy]) * 100 * min(water[id.xy], 0.01);
}

float sinAlpha(uint3 id) {
	float3 up = float3(0.0, 0.0, 1.0);
	float3 normal = computeNormal(id);
    return max(minAngle, sin(acos(dot(normalize(normal), up))));
}

float3 computeNormal(uint3 id) {
	return float3(height[uint2(clamp(id.x + 1, 0.0, resolution - 1), id.y)] - height[uint2(clamp(id.x - 1, 0.0, resolution - 1), id.y)],
		height[uint2(id.x, clamp(id.y + 1, 0.0, resolution - 1))] - height[uint2(id.x, clamp(id.y - 1, 0.0, resolution - 1))],
		2.0);
}
