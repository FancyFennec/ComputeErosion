#pragma kernel CSMain

RWTexture2D<float> height;
RWTexture2D<float2> water;
RWTexture2D<float4> flux;

float dTime;

float4 computeDeltaH(uint3 id);
float4 computeFlux(uint3 id, float4 dH);
float computeScalingFactor(uint3 id, float4 f);

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float4 dH = computeDeltaH(id);
    float4 f = computeFlux(id, dH);
    float k = computeScalingFactor(id, f);
    flux[id.xy] = k * f;
}

float4 computeDeltaH(uint3 id) 
{
    float hL = water[id.xy].x + height[id.xy] - water[uint2(id.x - 1, id.y)].x - height[uint2(id.x - 1, id.y)];
    float hR = water[id.xy].x + height[id.xy] - water[uint2(id.x + 1, id.y)].x - height[uint2(id.x + 1, id.y)];
    float hT = water[id.xy].x + height[id.xy] - water[uint2(id.x, id.y + 1)].x - height[uint2(id.x, id.y + 1)];
    float hB = water[id.xy].x + height[id.xy] - water[uint2(id.x, id.y - 1)].x - height[uint2(id.x, id.y - 1)];
    return float4(hL, hR, hT, hB);
}

float4 computeFlux(uint3 id, float4 dH)
{
    float c = 1000.0 * 9.81; // A * g / l
    float4 zero = float4(0.0, 0.0, 0.0, 0.0);
    return max(zero, flux[id.xy] + dTime * c * dH);
}

float computeScalingFactor(uint3 id, float4 f)
{
    float c = 1; // lx*ly
    float fSum = f.x + f.y + f.z + f.w;
    if (fSum < 0.0f) {
        return 1.0;
    }
    else {
        return min(1.0, water[id.xy].x * c / (fSum * dTime));
    }
}