#pragma kernel CSMain

RWTexture2D<float> height;
RWTexture2D<float> water;
RWTexture2D<float4> flux;

float dTime;

float4 computeDeltaH(uint3 id);
void computeFlux(uint3 id, float4 dH);
float computeScalingFactor(uint3 id);

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float4 dH = computeDeltaH(id);
    computeFlux(id, dH);
    float k = computeScalingFactor(id);
    flux[id.xy] = k * flux[id.xy];
}

float4 computeDeltaH(uint3 id) 
{
    float hL = water[id.xy] + height[id.xy] - water[uint2(id.x - 1, id.y)] - height[uint2(id.x - 1, id.y)];
    float hR = water[id.xy] + height[id.xy] - water[uint2(id.x + 1, id.y)] - height[uint2(id.x + 1, id.y)];
    float hT = water[id.xy] + height[id.xy] - water[uint2(id.x, id.y + 1)] - height[uint2(id.x, id.y + 1)];
    float hB = water[id.xy] + height[id.xy] - water[uint2(id.x, id.y - 1)] - height[uint2(id.x, id.y - 1)];
    return float4(hL, hR, hT, hB);
}

void computeFlux(uint3 id, float4 dH)
{
    float c = 9.81; // A * g / l
    flux[id.xy] = max(float4(0.0, 0.0, 0.0, 0.0), flux[id.xy] + dTime * c * dH);
}

float computeScalingFactor(uint3 id)
{
    float c = 1; // lx*ly
    float4 f = flux[id.xy];
    return min(1.0, water[id.xy] * c / ((f.x + f.y + f.z + f.w) * dTime));
}