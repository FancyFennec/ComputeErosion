#pragma kernel CSMain

RWTexture2D<float> height;
RWTexture2D<float2> water;
RWTexture2D<float2> vel;
RWTexture2D<float2> sed;
RWTexture2D<float4> terrainFlux;

int resolution;
float dTime;

float computeSedimentTransport(uint3 id);
float4 computeTerrainFlux(uint3 id);

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float Ke = 0.00003;

    float s = computeSedimentTransport(id);
	sed[id.xy] = float2(s, sed[id.xy].y);
	water[id.xy] = float2(max(0.0, water[id.xy].y * (1.0 - Ke * dTime)), 0.0);
    terrainFlux[id.xy] = computeTerrainFlux(id);
}

float computeSedimentTransport(uint3 id) {

    float2 fromPos = float2(id.x, id.y) - vel[id.xy] * dTime;
     
    int x0 = floor(fromPos.x);
    int y0 = floor(fromPos.y);
    int x1 = x0 + 1;
    int y1 = y0 + 1;

    float fX = fromPos.x - x0;
    float fY = fromPos.y - y0;

    x0 = clamp(x0, 0, resolution - 1);
    x1 = clamp(x1, 0, resolution - 1);
    y0 = clamp(y0, 0, resolution - 1);
    y1 = clamp(y1, 0, resolution - 1);

    return lerp(
        lerp(sed[uint2(x0, y0)].y, sed[uint2(x1, y0)].y, fX),
        lerp(sed[uint2(x0, y1)].y, sed[uint2(x1, y1)].y, fX)
        , fY);
}

float4 computeTerrainFlux(uint3 id)
{
    float threshold = 0.01;
    float scalingFactor = dTime * 0.0001;

    float hL = 0.0;
    if (id.x > 0) { 
        hL = height[id.xy] - height[uint2(id.x - 1, id.y)];
    }

    float hR = 0.0;
    if (id.x < resolution - 1) {
        hR = height[id.xy] - height[uint2(id.x + 1, id.y)];
    }

    float hT = 0.0;
    if (id.y < resolution - 1) {
        hT = height[id.xy] - height[uint2(id.x, id.y + 1)];
    }

    float hB = 0.0;
    if (id.y > 0) {
        hB = height[id.xy] - height[uint2(id.x, id.y - 1)];
    }

    if (hL < threshold) { hL = 0.0; }
    if (hR < threshold) { hR = 0.0; }
    if (hT < threshold) { hT = 0.0; }
    if (hB < threshold) { hB = 0.0; }

    return float4(hL, hR, hT, hB) * scalingFactor;
}
 