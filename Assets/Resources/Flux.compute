#pragma kernel CSMain
#include <helpers.cginc>

RWTexture2D<float> height;
RWTexture2D<float2> water;
RWTexture2D<float4> flux;

int resolution;
float dTime;

float4 computeDeltaH(uint3 id);
float4 computeFlux(uint3 id, float4 dH);
float computeScalingFactor(uint3 id, float4 f);

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    float4 dH = computeDeltaH(id);
    float4 f = computeFlux(id, dH);
    float k = computeScalingFactor(id, f);
    flux[id.xy] = k * f;
}

float4 computeDeltaH(uint3 id) 
{
    float dH[4];
    for (int i = 0; i < 4; i++)
    {
        uint2 index = getIndex(id, i, resolution);
        dH[i] =  water[id.xy].x + height[id.xy] - water[index].x - height[index];
    }
	
    return float4(dH[0], dH[1], dH[2], dH[3]);
}

float4 computeFlux(uint3 id, float4 dH)
{
    float l = 1000.0 / resolution;
    float A = 0.00005;
    float c = A * 9.81 / l; // A * g / l
    float4 zero = float4(0.0, 0.0, 0.0, 0.0);
    return max(zero, flux[id.xy] + dTime * c * dH);
}

float computeScalingFactor(uint3 id, float4 f)
{
    float l = 1000.0 / ((float) resolution);
    float vOut = dTime * (f.x + f.y + f.z + f.w);
    float waterAmmount = l * l * water[id.xy].x;
    if (vOut <= waterAmmount) {
        return 1.0;
    }
    else {
        return waterAmmount / vOut;
    }
}